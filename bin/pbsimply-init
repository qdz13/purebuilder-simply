#!/bin/env ruby
require 'yaml'
require 'fileutils'
require 'optparse'

class PBSimplyInit
  def initialize
    set_gemroot
    load_default_theme

    @cmdopts = {}
    op = OptionParser.new
    op.on("-t THEME", "--theme")
    op.on("-f", "--force")
    op.on("-l", "--list-themes")
    op.on("-s", "--source-only")
    op.parse!(ARGV, into: @cmdopts)

    @filepath = ARGV.shift
    @filepath ||= "."

    if @cmdopts[:"source-only"]
      @source_dir = @filepath
    else
      @source_dir = File.join(@filepath, "Source")
      @build_dir = File.join(@filepath, "Build")
    end
      
    @config_home = (ENV["XDG_CONFIG_HOME"] ? ENV["XDG_CONFIG_HOME"] : [ENV["HOME"], ".config"])
    @theme_dirs = [[@gemroot, "themes"], [@gemroot, "themes", "contribute"], [*@config_home, "pbsimply", "themes"]]

    if @cmdopts[:"list-themes"]
      list_theme
      exit true
    end
  end

  def list_theme
    themes = {}
    @theme_dirs.each do |dir|
      Dir.glob(File.join(*dir, "**", ".theme.yaml")).each do |i|
        theme_name = i.sub(%r:[\\/]\.theme.yaml$:, "").delete_prefix(File.join(*dir)).sub(%r:^[\\/]:, "")
        themes[theme_name] ||= YAML.load File.read i
      end
    end
    themes.each do |k, v|
      puts [k, v["name"], v["description"]].join("   ")
    end
  end

  def set_gemroot
    pwd = __FILE__
    pwd = File.readlink __FILE__ if File.symlink? __FILE__
    pwd = File.join(File.dirname(pwd), "..")
    pwd = File.expand_path(pwd)
    @gemroot = pwd
  end

  def mkdir
    filepath = @filepath

    if File.exist? filepath and (!File.directory? filepath)
      abort "File #{filepath} is not a directory."
    end

    if File.exist? filepath and Dir.children(filepath).length > 0 and !@cmdopts[:force]
      abort "File #{filepath} is not empty."
    end

    FileUtils.mkdir_p(@source_dir)
    FileUtils.mkdir_p(@build_dir) if @build_dir
  end

  def load_default_theme
    @default = YAML.load(File.read File.join(@gemroot, "themes", "default.yaml"))
    @default_theme = @default["default_theme"]
  end

  def select_theme
    if @cmdopts[:theme]
      @theme = @cmdopts[:theme].split("/")
    else
      @theme = @default_theme
    end
    theme_path = search_theme @theme
    load_theme_yaml theme_path
  end

  def search_theme theme_name
    theme = @theme_dirs.map {|i| i + theme_name }.first {|i| File.exist? File.join(*i, ".theme.yaml")}
    abort "No such theme" unless theme
    puts "Theme found at #{File.join *theme}"
    theme
  end

  def load_theme_yaml theme_path
    @theme_yaml = YAML.load(File.read File.join(theme_path, ".theme.yaml"))
  end

  def install_theme
    $stderr.puts "Installing theme..."

    # Backup .pbsimply.yaml
    if File.exist?(File.join(@source_dir, ".pbsimply.yaml"))
      File.rename(File.join(@source_dir, ".pbsimply.yaml"), File.join(@source_dir, ".pbsimply.yaml.orig"))
    end

    # Install base theme
    if @theme_yaml["initial_control"] && @theme_yaml["initial_control"]["base_theme"]
      $stderr.puts "Install base theme..."
      Dir.children(File.join(@gemroot, "themes", @theme_yaml["initial_control"]["base_theme"])).each do |i|
        FileUtils.cp_r(File.join(@gemroot, "themes", *@theme_yaml["initial_control"]["base_theme"], i), File.join(@source_dir))
      end
    end

    $stderr.puts "Install theme..."
    Dir.children(File.join(@gemroot, "themes", *@theme)).each do |i|
      FileUtils.cp_r(File.join(@gemroot, "themes", *@theme, i), File.join(@source_dir))
    end
    
    if @theme_yaml["initial_control"]
      if @theme_yaml["initial_control"]["build_mkdirp"] && @build_dir
        $stderr.puts "Create directories in Build directory..."
        @theme_yaml["initial_control"]["build_mkdirp"].each do |i|
          abort "The theme includes potentially dangerous command" if i.include? ".."
          FileUtils.mkdir_p(File.join(@build_dir, *i))
        end
      end

      if @theme_yaml["initial_control"]["build_cpr"] && @build_dir
        $stderr.puts "Copy files in Build directory..."
        @theme_yaml["initial_control"]["build_cpr"].each do |i|
          abort "The theme includes potentially dangerous command" if i.include? ".."
          FileUtils.cp_r(File.join(@source_dir, *i), @build_dir)
        end
      end
    end

    $stderr.puts "Done"
  end
end

initializer = PBSimplyInit.new
initializer.select_theme
initializer.mkdir
initializer.install_theme